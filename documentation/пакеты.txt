asgiref:
ASGI Ref — это ссылка на реализацию спецификации ASGI (Asynchronous Server Gateway Interface),
которая позволяет Django и другим веб-фреймворкам поддерживать асинхронные веб-запросы.
Django использует asgiref для обработки асинхронных операций, особенно в последних версиях.

Django:
Основной веб-фреймворк, на котором построено твое приложение.
Django предоставляет мощные инструменты для создания веб-приложений, такие как ORM, системы авторизации, админ-панель и др.

django-cors-headers:
Этот пакет позволяет управлять CORS (Cross-Origin Resource Sharing) — механизмом,
который контролирует доступ веб-страниц с одного домена к ресурсам другого домена.
Необходим для проектов, где фронтенд (React) и бэкенд (Django) взаимодействуют через разные домены.

djangorestframework (DRF):
Пакет для создания API на базе Django.
DRF расширяет стандартные возможности Django, добавляя простые инструменты для создания REST API, такие как сериализация данных,
аутентификация и обработка запросов.

djangorestframework-simplejwt:
Расширение для DRF, которое добавляет поддержку JWT (JSON Web Tokens) — стандарт для передачи данных между клиентом и сервером в формате JSON.
Используется для создания аутентификации на основе токенов в API.

PyJWT:
Пакет для работы с JWT в Python.
Он позволяет создавать, подписывать и проверять JWT-токены, что важно для управления аутентификацией и авторизацией пользователей.

pytz:
Библиотека для работы с часовыми поясами в Python.
Она обеспечивает поддержку всех известных часовых поясов и широко используется в Django для корректного отображения дат и времени.

sqlparse:
Библиотека для синтаксического анализа SQL-запросов.
В основном используется Django для работы с SQL-запросами в базе данных, форматирования запросов и улучшения обработки данных.

psycopg2-binary:
Популярный адаптер для взаимодействия с базой данных PostgreSQL через Python.

python-dotenv:
Библиотека для загрузки переменных окружения из файла .env.
Очень полезна для управления конфиденциальными данными (например, ключи API, пароли) и конфигурацией приложения без их хардкода в коде проекта.
Эти зависимости помогают организовать работу с бэкендом на Django, взаимодействие с API,
управление аутентификацией через JWT, работу с базой данных PostgreSQL и настройку приложения через переменные окружения.